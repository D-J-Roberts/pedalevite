/*****************************************************************************

        CosineSum.hpp
        Author: Laurent de Soras, 2018

--- Legal stuff ---

This program is free software. It comes without any warranty, to
the extent permitted by applicable law. You can redistribute it
and/or modify it under the terms of the Do What The Fuck You Want
To Public License, Version 2, as published by Sam Hocevar. See
http://sam.zoy.org/wtfpl/COPYING for more details.

*Tab=3***********************************************************************/



#if ! defined (mfx_dsp_wnd_CosineSum_CODEHEADER_INCLUDED)
#define mfx_dsp_wnd_CosineSum_CODEHEADER_INCLUDED



/*\\\ INCLUDE FILES \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

#include "fstb/def.h"

#include <cassert>
#include <cmath>



namespace mfx
{
namespace dsp
{
namespace wnd
{



/*\\\ PUBLIC \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/



template <class T>
void	CosineSum <T>::set_order (int order) noexcept
{
	assert (order >= _min_order);
	assert (order <= _max_order);

	_order = order;
}



/*\\\ PROTECTED \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/



template <class T>
void	CosineSum <T>::do_make_win (T data_ptr [], int len)
{
	const Info &   info      = _info_arr [_order - _min_order];
	const int      nbr_coefs = info._nbr_terms;
	assert (nbr_coefs == _order + 1);

	const double   l          = len - 1;
	const double   phase_base = 2 * fstb::PI / l;

	for (int pos = 0; pos < len; ++pos)
	{
		const double   t          = pos / l;
		const double   phase_mult = phase_base * t;
		double         val        = info._coef_arr [0];

		for (int coef_cnt = 1; coef_cnt < nbr_coefs; ++coef_cnt)
		{
			const double	phase = phase_mult * coef_cnt;
			const double	coef  = info._coef_arr [coef_cnt];
			assert (coef != 0);
			val += coef * cos (phase);
		}

		data_ptr [pos] = T (val);
	}
}



/*\\\ PRIVATE \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/



template <class T>
const CosineSum <T>::Info	CosineSum::_info_arr [_max_order - _min_order + 1] =
{
	{
		2,  43.187,  5.37862, 1.73868, 1.36766, 1.30550, 1.81884,
		{
			+5.383553946707251e-001,
			-4.616446053292749e-001
		}
	},
	{
		3,  71.482,  7.44490, 1.13525, 1.70371, 1.61612, 2.26377,
		{
			+4.243800934609435e-001,
			-4.973406350967378e-001,
			+7.827927144231873e-002
		}
	},
	{
		4,  98.173,  8.78795, 0.85056, 1.97611, 1.86875, 2.62431,
		{
			+3.635819267707608e-001,
			-4.891774371450171e-001,
			+1.365995139786921e-001,
			-1.064112210553003e-002
		}
	},
	{
		5, 125.427,  9.81016, 0.68006, 2.21535, 2.09137, 2.94118,
		{
			+3.232153788877343e-001,
			-4.714921439576260e-001,
			+1.755341299601972e-001,
			-2.849699010614994e-002,
			+1.261357088292677e-003
		}
	},
	{
		6, 153.566, 10.64612, 0.56526, 2.43390, 2.29514, 3.23077,
		{
			+2.935578950102797e-001,
			-4.519357723474506e-001,
			+2.014164714263962e-001,
			-4.792610922105837e-002,
			+5.026196426859393e-003,
			-1.375555679558877e-004
		}
	},
	{
		7, 180.468, 11.33355, 0.48523, 2.63025, 2.47830, 3.49095,
		{
			+2.712203605850388e-001,
			-4.334446123274422e-001,
			+2.180041228929303e-001,
			-6.578534329560609e-002,
			+1.076186730534183e-002,
			-7.700127105808265e-004,
			+1.368088305992921e-005
		}
	},
	{
		8, 207.512, 11.92669, 0.42506, 2.81292, 2.64883, 3.73304,
		{
			+2.533176817029088e-001,
			-4.163269305810218e-001,
			+2.288396213719708e-001,
			-8.157508425925879e-002,
			+1.773592450349622e-002,
			-2.096702749032688e-003,
			+1.067741302205525e-004,
			-1.280702090361482e-006
		}
	},
	{
		9, 234.734, 12.45267, 0.37780, 2.98588, 2.81041, 3.96231,
		{
			+2.384331152777942e-001,
			-4.005545348643820e-001,
			+2.358242530472107e-001,
			-9.527918858383112e-002,
			+2.537395516617152e-002,
			-4.152432907505835e-003,
			+3.685604163298180e-004,
			-1.384355593917030e-005,
			+1.161808358932861e-007
		}
	},
	{
		10, 262.871, 12.92804, 0.33950, 3.15168, 2.96538, 4.18209,
		{
			+2.257345387130214e-001,
			-3.860122949150963e-001,
			+2.401294214106057e-001,
			-1.070542338664613e-001,
			+3.325916184016952e-002,
			-6.873374952321475e-003,
			+8.751673238035159e-004,
			-6.008598932721187e-005,
			+1.710716472110202e-006,
			-1.027272130265191e-008
		}
	},
	{
		11, 289.635, 13.34506, 0.30908, 3.30480, 3.10851, 4.38506,
		{
			+2.151527506679809e-001,
			-3.731348357785249e-001,
			+2.424243358446660e-001,
			-1.166907592689211e-001,
			+4.077422105878731e-002,
			-1.000904500852923e-002,
			+1.639806917362033e-003,
			-1.651660820997142e-004,
			+8.884663168541479e-006,
			-1.938617116029048e-007,
			+8.482485599330470e-010
		}
	}
};



}  // namespace wnd
}  // namespace dsp
}  // namespace mfx



#endif   // mfx_dsp_wnd_CosineSum_CODEHEADER_INCLUDED



/*\\\ EOF \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

